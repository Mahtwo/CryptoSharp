namespace CryptoSharp
{
    /// <summary>
    /// Class who manage encode and decode message alphabet char to int and int to alphabet char.
    /// </summary>
    public class EncodeDecode
    {
        /// <summary>
        /// Methode to encode a message with a key generated by solitaire of Bruce Schneier.
        /// </summary>
        /// <param name="message">string message to encode composed only by letters (a-z)</param>
        /// <param name="key">table of int key who permise to encode the message</param>
        /// <returns>string encoded message</returns>
        public static string EncodeMessage(string message, int[] key)
        {
            int[] letters = new int[message.Length];
            for (int i = 0; i < message.Length; i++)
            {
                letters[i] = EncodeDecode.AlphabetToInt(message[i]);
            }

            string encodedMessage = "";
            for (int i = 0; i < letters.Length; i++)
            {
                int letterValue = letters[i] + key[i];
                if (letterValue > 26)
                {
                    letterValue -= 26;
                }
                encodedMessage += IntToAlphabet(letterValue);
            }
            return encodedMessage;
        }

        /// <summary>
        /// Methode to decode a message with a key generated by solitaire of Bruce Schneier.
        /// </summary>
        /// <param name="message">string message to decode composed only by letters (a-z)</param>
        /// <param name="key">table of int key who permise to decode the message</param>
        /// <returns>string decoded message</returns>
        public static string DecodeMessage(string message, int[] key)
        {
            int[] letters = new int[message.Length];
            for (int i = 0; i < message.Length; i++)
            {
                letters[i] = EncodeDecode.AlphabetToInt(message[i]);
            }

            string decodedMessage = "";
            for (int i = 0; i < letters.Length; i++)
            {
                int letterValue = letters[i] - key[i];
                if (letterValue < 1)
                {
                    letterValue += 26;
                }
                decodedMessage += IntToAlphabet(letterValue);
            }
            return decodedMessage;
        }

        /// <summary>
        /// Get the int value of a letter in the alphabet.
        /// For example A = 1, B = 2, C = 3, etc.
        /// </summary>
        /// <param name="c">a letter of the alphabet</param>
        /// <returns>int value of the letter</returns>
        public static int AlphabetToInt(char c)
        {
            return char.ToUpper(c) - 64;
        }

        /// <summary>
        /// Get the letter of the alphabet from an int value.
        /// For example 1 = A, 2 = B, 3 = C, etc.
        /// </summary>
        /// <param name="i">int to transform</param>
        /// <returns>the letter of the alphabet from int value</returns>
        public static char IntToAlphabet(int i)
        {
            return (char)(i + 64);
        }
    }
}
